# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ml_pb2 as ml__pb2


class MLStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCodeCompletion = channel.unary_unary(
                '/model.ML/GetCodeCompletion',
                request_serializer=ml__pb2.Code.SerializeToString,
                response_deserializer=ml__pb2.CodeCompletion.FromString,
                )
        self.GenerateComment = channel.unary_unary(
                '/model.ML/GenerateComment',
                request_serializer=ml__pb2.Code.SerializeToString,
                response_deserializer=ml__pb2.Comment.FromString,
                )
        self.GenerateImplementation = channel.unary_unary(
                '/model.ML/GenerateImplementation',
                request_serializer=ml__pb2.Instruction.SerializeToString,
                response_deserializer=ml__pb2.Implementation.FromString,
                )
        self.GenerateTest = channel.unary_unary(
                '/model.ML/GenerateTest',
                request_serializer=ml__pb2.Code.SerializeToString,
                response_deserializer=ml__pb2.Implementation.FromString,
                )
        self.GenerateExample = channel.unary_unary(
                '/model.ML/GenerateExample',
                request_serializer=ml__pb2.Code.SerializeToString,
                response_deserializer=ml__pb2.Example.FromString,
                )


class MLServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCodeCompletion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateImplementation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateExample(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MLServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCodeCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCodeCompletion,
                    request_deserializer=ml__pb2.Code.FromString,
                    response_serializer=ml__pb2.CodeCompletion.SerializeToString,
            ),
            'GenerateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateComment,
                    request_deserializer=ml__pb2.Code.FromString,
                    response_serializer=ml__pb2.Comment.SerializeToString,
            ),
            'GenerateImplementation': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateImplementation,
                    request_deserializer=ml__pb2.Instruction.FromString,
                    response_serializer=ml__pb2.Implementation.SerializeToString,
            ),
            'GenerateTest': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateTest,
                    request_deserializer=ml__pb2.Code.FromString,
                    response_serializer=ml__pb2.Implementation.SerializeToString,
            ),
            'GenerateExample': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateExample,
                    request_deserializer=ml__pb2.Code.FromString,
                    response_serializer=ml__pb2.Example.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'model.ML', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ML(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCodeCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model.ML/GetCodeCompletion',
            ml__pb2.Code.SerializeToString,
            ml__pb2.CodeCompletion.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model.ML/GenerateComment',
            ml__pb2.Code.SerializeToString,
            ml__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateImplementation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model.ML/GenerateImplementation',
            ml__pb2.Instruction.SerializeToString,
            ml__pb2.Implementation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model.ML/GenerateTest',
            ml__pb2.Code.SerializeToString,
            ml__pb2.Implementation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateExample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model.ML/GenerateExample',
            ml__pb2.Code.SerializeToString,
            ml__pb2.Example.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
