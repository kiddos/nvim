## header include guard
snippet once
	#ifndef ${1:`toupper(expand('%:t:r'))`_H}
	#define $1

	${0}

	#endif /* end of include guard: $1 */
snippet codeforce
	#include <bits/stdc++.h>

	using namespace std;

	using i64 = long long;

	void solve() {
		${1:// implement for test case}
	}

	int main(void) {
		ios::sync_with_stdio(false);
		cin.tie(0);

		int T = 0;
		cin >> T;
		for (int t = 0; t < T; ++t) {
			solve();
		}
		return 0;
	}
snippet mint
	i64 power(i64 x, i64 n, i64 mod) {
		i64 ans = 1;
		while (n > 0) {
			if (n % 2 == 1) {
				ans *= x;
				ans %= mod;
			}

			n >>= 1;
			x = x * x;
			x %= mod;
		}
		return ans;
	}

	template <int MOD>
	class ModInt {
	 public:
		ModInt() : val_(0) {}

		ModInt(i64 x) : val_(x % MOD) {}

		ModInt(const ModInt& m) { val_ = m.val_; }

		ModInt(ModInt&& m) { val_ = m.val_; }

		constexpr ModInt& operator=(const ModInt& rhs) {
			val_ = rhs.val_;
			return *this;
		}

		constexpr ModInt& operator=(ModInt&& rhs) {
			val_ = rhs.val_;
			return *this;
		}

		constexpr ModInt& operator+=(const ModInt& rhs) {
			val_ = (val_ + rhs.val_) % MOD;
			return *this;
		}

		constexpr ModInt& operator-=(const ModInt& rhs) {
			val_ = (val_ - rhs.val_ + MOD) % MOD;
			return *this;
		}

		constexpr ModInt& operator*=(const ModInt& rhs) {
			val_ = (1LL * val_ * rhs.val_) % MOD;
			return *this;
		}

		constexpr ModInt inv() const {
			i64 val = power(val_, MOD - 2, MOD);
			return ModInt(val);
		}

		constexpr ModInt& operator/=(const ModInt& rhs) { return *this *= rhs.inv(); }

		explicit constexpr operator int() const { return val_; }

		friend constexpr ModInt operator+(const ModInt& lhs, const ModInt& rhs) {
			ModInt ans = lhs;
			ans += rhs;
			return ans;
		}

		friend constexpr ModInt operator-(const ModInt& lhs, const ModInt& rhs) {
			ModInt ans = lhs;
			ans -= rhs;
			return ans;
		}

		friend constexpr ModInt operator*(const ModInt& lhs, const ModInt& rhs) {
			ModInt ans = lhs;
			ans *= rhs;
			return ans;
		}

		friend constexpr ModInt operator/(const ModInt& lhs, const ModInt& rhs) {
			ModInt ans = lhs;
			ans /= rhs;
			return ans;
		}

		friend constexpr ostream& operator<<(ostream& os, const ModInt& x) {
			return os << x.val_;
		}

	 private:
		unsigned int val_;
	};
##
## namespace
snippet namespace
	namespace ${1:`expand('%:r')`} {
		${2}
	} // end of $1 namespace
##
## Class
snippet exception
	#include <exception>

	class ${1:Exception} : public std::exception {
	 public:
		$1() : msg_("Exception occur") {}
		explicit $1(const char* msg)
			: msg_(msg) {}
		explicit $1(const std::string& msg)
			: msg_(msg) {}
		virtual ~$1() {}
		virtual const char* what() const noexcept {
			return std::string("$1: ") + msg_.c_str();
		}

	 protected:
		std::string msg_;
	};
##
## Meta Programming
snippet meta_value
	struct ${1:ValueHolder} {
		enum { value = ${0:0} };
	}
snippet meta_function
	template <int ${2:A}, int ${3:B}>
	struct ${1:Add} {
		enum { result = $2 ${4:+} $3  };
	}
snippet meta_branch
	template <typename ${2:T1}, typename ${3:T2}>
	struct ${1:SameType} {
		enum { result = 0 };
	}

	template <typename T>
	struct $1<T, T> {
		enum { result = 1 };
	}
#
# main
snippet main
	int main(void) {
		// code here...
		return 0;
	}
snippet main_args
	int main(int argc, char* argv[]) {
		// code here...
		return 0;
	}
snippet main_glog
	#include <glog/logging.h>

	int main(int argc, char** argv) {
		google::InitGoogleLogging(argv[0]);
		google::LogToStderr();
		return 0;
	}
#
## glog
snippet glog_include
	#include <glog/logging.h>
snippet glog
	google::InitGoogleLogging(argv[0]);
	google::LogToStderr();
# basic templates
## glog
snippet template_glog
	#include <glog/logging.h>

	int main(int argc, char** argv) {
		google::InitGoogleLogging(argv[0]);
		google::LogToStderr();
		return 0;
	}
snippet gtest
	#include <gtest/gtest.h>

	TEST(${1:TestName}, ${2:Description}) {
		// test code...
	}

	int main(int argc, char **argv) {
		::testing::InitGoogleTest(&argc, argv);
		return RUN_ALL_TESTS();
	}
snippet gtest_template
	template <typename T>
	class ${1:TestName} : public ::testing::Test {
	 public:
		void ${2:TestCast}() {
			// test code
		}
	 int size_;
	};

	typedef ::testing::Types<${1:float, double}> TestTypes;
	TYPED_TEST_CASE($1, TestTypes);

	TYPED_TEST($1, $2) {
		this->size_ = 1;
		this->$2();
	}
snippet gtest_fixture
	class ${1:FixtureTest} : public ::testing::Test {
	 protected:
		$1() {}
		~$1() {}

		void SetUp() override {
			// setup
		}

		void TearDown() override {
			// delete
		}
	};

	TEST_F($1, ${2:TestName}) {
		// test code
	}
